/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package jiffy.storage;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)")
public class block_request_service {

  public interface Iface {

    public long getClientId() throws org.apache.thrift.TException;

    public void registerClientId(int block_id, long client_id) throws org.apache.thrift.TException;

    public void commandRequest(sequence_id seq, int block_id, int cmd_id, java.util.List<java.nio.ByteBuffer> arguments) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getClientId(org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

    public void registerClientId(int block_id, long client_id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void commandRequest(sequence_id seq, int block_id, int cmd_id, java.util.List<java.nio.ByteBuffer> arguments, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long getClientId() throws org.apache.thrift.TException
    {
      sendGetClientId();
      return recvGetClientId();
    }

    public void sendGetClientId() throws org.apache.thrift.TException
    {
      get_client_id_args args = new get_client_id_args();
      sendBase("get_client_id", args);
    }

    public long recvGetClientId() throws org.apache.thrift.TException
    {
      get_client_id_result result = new get_client_id_result();
      receiveBase(result, "get_client_id");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_client_id failed: unknown result");
    }

    public void registerClientId(int block_id, long client_id) throws org.apache.thrift.TException
    {
      sendRegisterClientId(block_id, client_id);
      recvRegisterClientId();
    }

    public void sendRegisterClientId(int block_id, long client_id) throws org.apache.thrift.TException
    {
      register_client_id_args args = new register_client_id_args();
      args.setBlockId(block_id);
      args.setClientId(client_id);
      sendBase("register_client_id", args);
    }

    public void recvRegisterClientId() throws org.apache.thrift.TException
    {
      register_client_id_result result = new register_client_id_result();
      receiveBase(result, "register_client_id");
      return;
    }

    public void commandRequest(sequence_id seq, int block_id, int cmd_id, java.util.List<java.nio.ByteBuffer> arguments) throws org.apache.thrift.TException
    {
      sendCommandRequest(seq, block_id, cmd_id, arguments);
    }

    public void sendCommandRequest(sequence_id seq, int block_id, int cmd_id, java.util.List<java.nio.ByteBuffer> arguments) throws org.apache.thrift.TException
    {
      command_request_args args = new command_request_args();
      args.setSeq(seq);
      args.setBlockId(block_id);
      args.setCmdId(cmd_id);
      args.setArguments(arguments);
      sendBaseOneway("command_request", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getClientId(org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_client_id_call method_call = new get_client_id_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_client_id_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      public get_client_id_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_client_id", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_client_id_args args = new get_client_id_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetClientId();
      }
    }

    public void registerClientId(int block_id, long client_id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      register_client_id_call method_call = new register_client_id_call(block_id, client_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class register_client_id_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int block_id;
      private long client_id;
      public register_client_id_call(int block_id, long client_id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.block_id = block_id;
        this.client_id = client_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("register_client_id", org.apache.thrift.protocol.TMessageType.CALL, 0));
        register_client_id_args args = new register_client_id_args();
        args.setBlockId(block_id);
        args.setClientId(client_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void commandRequest(sequence_id seq, int block_id, int cmd_id, java.util.List<java.nio.ByteBuffer> arguments, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      command_request_call method_call = new command_request_call(seq, block_id, cmd_id, arguments, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class command_request_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private sequence_id seq;
      private int block_id;
      private int cmd_id;
      private java.util.List<java.nio.ByteBuffer> arguments;
      public command_request_call(sequence_id seq, int block_id, int cmd_id, java.util.List<java.nio.ByteBuffer> arguments, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.seq = seq;
        this.block_id = block_id;
        this.cmd_id = cmd_id;
        this.arguments = arguments;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("command_request", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        command_request_args args = new command_request_args();
        args.setSeq(seq);
        args.setBlockId(block_id);
        args.setCmdId(cmd_id);
        args.setArguments(arguments);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("get_client_id", new get_client_id());
      processMap.put("register_client_id", new register_client_id());
      processMap.put("command_request", new command_request());
      return processMap;
    }

    public static class get_client_id<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_client_id_args> {
      public get_client_id() {
        super("get_client_id");
      }

      public get_client_id_args getEmptyArgsInstance() {
        return new get_client_id_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return true;
      }

      public get_client_id_result getResult(I iface, get_client_id_args args) throws org.apache.thrift.TException {
        get_client_id_result result = new get_client_id_result();
        result.success = iface.getClientId();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class register_client_id<I extends Iface> extends org.apache.thrift.ProcessFunction<I, register_client_id_args> {
      public register_client_id() {
        super("register_client_id");
      }

      public register_client_id_args getEmptyArgsInstance() {
        return new register_client_id_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return true;
      }

      public register_client_id_result getResult(I iface, register_client_id_args args) throws org.apache.thrift.TException {
        register_client_id_result result = new register_client_id_result();
        iface.registerClientId(args.block_id, args.client_id);
        return result;
      }
    }

    public static class command_request<I extends Iface> extends org.apache.thrift.ProcessFunction<I, command_request_args> {
      public command_request() {
        super("command_request");
      }

      public command_request_args getEmptyArgsInstance() {
        return new command_request_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, command_request_args args) throws org.apache.thrift.TException {
        iface.commandRequest(args.seq, args.block_id, args.cmd_id, args.arguments);
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("get_client_id", new get_client_id());
      processMap.put("register_client_id", new register_client_id());
      processMap.put("command_request", new command_request());
      return processMap;
    }

    public static class get_client_id<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_client_id_args, java.lang.Long> {
      public get_client_id() {
        super("get_client_id");
      }

      public get_client_id_args getEmptyArgsInstance() {
        return new get_client_id_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          public void onComplete(java.lang.Long o) {
            get_client_id_result result = new get_client_id_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            get_client_id_result result = new get_client_id_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_client_id_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.getClientId(resultHandler);
      }
    }

    public static class register_client_id<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, register_client_id_args, Void> {
      public register_client_id() {
        super("register_client_id");
      }

      public register_client_id_args getEmptyArgsInstance() {
        return new register_client_id_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            register_client_id_result result = new register_client_id_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            register_client_id_result result = new register_client_id_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, register_client_id_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.registerClientId(args.block_id, args.client_id,resultHandler);
      }
    }

    public static class command_request<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, command_request_args, Void> {
      public command_request() {
        super("command_request");
      }

      public command_request_args getEmptyArgsInstance() {
        return new command_request_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, command_request_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.commandRequest(args.seq, args.block_id, args.cmd_id, args.arguments,resultHandler);
      }
    }

  }

  public static class get_client_id_args implements org.apache.thrift.TBase<get_client_id_args, get_client_id_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_client_id_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_client_id_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new get_client_id_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new get_client_id_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_client_id_args.class, metaDataMap);
    }

    public get_client_id_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_client_id_args(get_client_id_args other) {
    }

    public get_client_id_args deepCopy() {
      return new get_client_id_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof get_client_id_args)
        return this.equals((get_client_id_args)that);
      return false;
    }

    public boolean equals(get_client_id_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(get_client_id_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("get_client_id_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_client_id_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public get_client_id_argsStandardScheme getScheme() {
        return new get_client_id_argsStandardScheme();
      }
    }

    private static class get_client_id_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<get_client_id_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_client_id_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_client_id_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_client_id_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public get_client_id_argsTupleScheme getScheme() {
        return new get_client_id_argsTupleScheme();
      }
    }

    private static class get_client_id_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<get_client_id_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_client_id_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_client_id_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class get_client_id_result implements org.apache.thrift.TBase<get_client_id_result, get_client_id_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_client_id_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_client_id_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new get_client_id_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new get_client_id_resultTupleSchemeFactory();

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_client_id_result.class, metaDataMap);
    }

    public get_client_id_result() {
    }

    public get_client_id_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_client_id_result(get_client_id_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public get_client_id_result deepCopy() {
      return new get_client_id_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public get_client_id_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof get_client_id_result)
        return this.equals((get_client_id_result)that);
      return false;
    }

    public boolean equals(get_client_id_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(get_client_id_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("get_client_id_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_client_id_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public get_client_id_resultStandardScheme getScheme() {
        return new get_client_id_resultStandardScheme();
      }
    }

    private static class get_client_id_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<get_client_id_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_client_id_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_client_id_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_client_id_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public get_client_id_resultTupleScheme getScheme() {
        return new get_client_id_resultTupleScheme();
      }
    }

    private static class get_client_id_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<get_client_id_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_client_id_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_client_id_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class register_client_id_args implements org.apache.thrift.TBase<register_client_id_args, register_client_id_args._Fields>, java.io.Serializable, Cloneable, Comparable<register_client_id_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("register_client_id_args");

    private static final org.apache.thrift.protocol.TField BLOCK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("block_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("client_id", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new register_client_id_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new register_client_id_argsTupleSchemeFactory();

    public int block_id; // required
    public long client_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BLOCK_ID((short)1, "block_id"),
      CLIENT_ID((short)2, "client_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BLOCK_ID
            return BLOCK_ID;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BLOCK_ID_ISSET_ID = 0;
    private static final int __CLIENT_ID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BLOCK_ID, new org.apache.thrift.meta_data.FieldMetaData("block_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("client_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(register_client_id_args.class, metaDataMap);
    }

    public register_client_id_args() {
    }

    public register_client_id_args(
      int block_id,
      long client_id)
    {
      this();
      this.block_id = block_id;
      setBlockIdIsSet(true);
      this.client_id = client_id;
      setClientIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public register_client_id_args(register_client_id_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.block_id = other.block_id;
      this.client_id = other.client_id;
    }

    public register_client_id_args deepCopy() {
      return new register_client_id_args(this);
    }

    @Override
    public void clear() {
      setBlockIdIsSet(false);
      this.block_id = 0;
      setClientIdIsSet(false);
      this.client_id = 0;
    }

    public int getBlockId() {
      return this.block_id;
    }

    public register_client_id_args setBlockId(int block_id) {
      this.block_id = block_id;
      setBlockIdIsSet(true);
      return this;
    }

    public void unsetBlockId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BLOCK_ID_ISSET_ID);
    }

    /** Returns true if field block_id is set (has been assigned a value) and false otherwise */
    public boolean isSetBlockId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BLOCK_ID_ISSET_ID);
    }

    public void setBlockIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BLOCK_ID_ISSET_ID, value);
    }

    public long getClientId() {
      return this.client_id;
    }

    public register_client_id_args setClientId(long client_id) {
      this.client_id = client_id;
      setClientIdIsSet(true);
      return this;
    }

    public void unsetClientId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLIENT_ID_ISSET_ID);
    }

    /** Returns true if field client_id is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLIENT_ID_ISSET_ID);
    }

    public void setClientIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLIENT_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BLOCK_ID:
        if (value == null) {
          unsetBlockId();
        } else {
          setBlockId((java.lang.Integer)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BLOCK_ID:
        return getBlockId();

      case CLIENT_ID:
        return getClientId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BLOCK_ID:
        return isSetBlockId();
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof register_client_id_args)
        return this.equals((register_client_id_args)that);
      return false;
    }

    public boolean equals(register_client_id_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_block_id = true;
      boolean that_present_block_id = true;
      if (this_present_block_id || that_present_block_id) {
        if (!(this_present_block_id && that_present_block_id))
          return false;
        if (this.block_id != that.block_id)
          return false;
      }

      boolean this_present_client_id = true;
      boolean that_present_client_id = true;
      if (this_present_client_id || that_present_client_id) {
        if (!(this_present_client_id && that_present_client_id))
          return false;
        if (this.client_id != that.client_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + block_id;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(client_id);

      return hashCode;
    }

    @Override
    public int compareTo(register_client_id_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBlockId()).compareTo(other.isSetBlockId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlockId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.block_id, other.block_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.client_id, other.client_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("register_client_id_args(");
      boolean first = true;

      sb.append("block_id:");
      sb.append(this.block_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("client_id:");
      sb.append(this.client_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class register_client_id_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public register_client_id_argsStandardScheme getScheme() {
        return new register_client_id_argsStandardScheme();
      }
    }

    private static class register_client_id_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<register_client_id_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, register_client_id_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BLOCK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.block_id = iprot.readI32();
                struct.setBlockIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.client_id = iprot.readI64();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, register_client_id_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BLOCK_ID_FIELD_DESC);
        oprot.writeI32(struct.block_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeI64(struct.client_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class register_client_id_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public register_client_id_argsTupleScheme getScheme() {
        return new register_client_id_argsTupleScheme();
      }
    }

    private static class register_client_id_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<register_client_id_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, register_client_id_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBlockId()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBlockId()) {
          oprot.writeI32(struct.block_id);
        }
        if (struct.isSetClientId()) {
          oprot.writeI64(struct.client_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, register_client_id_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.block_id = iprot.readI32();
          struct.setBlockIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.client_id = iprot.readI64();
          struct.setClientIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class register_client_id_result implements org.apache.thrift.TBase<register_client_id_result, register_client_id_result._Fields>, java.io.Serializable, Cloneable, Comparable<register_client_id_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("register_client_id_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new register_client_id_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new register_client_id_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(register_client_id_result.class, metaDataMap);
    }

    public register_client_id_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public register_client_id_result(register_client_id_result other) {
    }

    public register_client_id_result deepCopy() {
      return new register_client_id_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof register_client_id_result)
        return this.equals((register_client_id_result)that);
      return false;
    }

    public boolean equals(register_client_id_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(register_client_id_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("register_client_id_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class register_client_id_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public register_client_id_resultStandardScheme getScheme() {
        return new register_client_id_resultStandardScheme();
      }
    }

    private static class register_client_id_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<register_client_id_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, register_client_id_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, register_client_id_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class register_client_id_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public register_client_id_resultTupleScheme getScheme() {
        return new register_client_id_resultTupleScheme();
      }
    }

    private static class register_client_id_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<register_client_id_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, register_client_id_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, register_client_id_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class command_request_args implements org.apache.thrift.TBase<command_request_args, command_request_args._Fields>, java.io.Serializable, Cloneable, Comparable<command_request_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("command_request_args");

    private static final org.apache.thrift.protocol.TField SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("seq", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BLOCK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("block_id", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CMD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cmd_id", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ARGUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("arguments", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new command_request_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new command_request_argsTupleSchemeFactory();

    public sequence_id seq; // required
    public int block_id; // required
    public int cmd_id; // required
    public java.util.List<java.nio.ByteBuffer> arguments; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEQ((short)1, "seq"),
      BLOCK_ID((short)2, "block_id"),
      CMD_ID((short)3, "cmd_id"),
      ARGUMENTS((short)4, "arguments");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEQ
            return SEQ;
          case 2: // BLOCK_ID
            return BLOCK_ID;
          case 3: // CMD_ID
            return CMD_ID;
          case 4: // ARGUMENTS
            return ARGUMENTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BLOCK_ID_ISSET_ID = 0;
    private static final int __CMD_ID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEQ, new org.apache.thrift.meta_data.FieldMetaData("seq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, sequence_id.class)));
      tmpMap.put(_Fields.BLOCK_ID, new org.apache.thrift.meta_data.FieldMetaData("block_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CMD_ID, new org.apache.thrift.meta_data.FieldMetaData("cmd_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ARGUMENTS, new org.apache.thrift.meta_data.FieldMetaData("arguments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(command_request_args.class, metaDataMap);
    }

    public command_request_args() {
    }

    public command_request_args(
      sequence_id seq,
      int block_id,
      int cmd_id,
      java.util.List<java.nio.ByteBuffer> arguments)
    {
      this();
      this.seq = seq;
      this.block_id = block_id;
      setBlockIdIsSet(true);
      this.cmd_id = cmd_id;
      setCmdIdIsSet(true);
      this.arguments = arguments;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public command_request_args(command_request_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSeq()) {
        this.seq = new sequence_id(other.seq);
      }
      this.block_id = other.block_id;
      this.cmd_id = other.cmd_id;
      if (other.isSetArguments()) {
        java.util.List<java.nio.ByteBuffer> __this__arguments = new java.util.ArrayList<java.nio.ByteBuffer>(other.arguments);
        this.arguments = __this__arguments;
      }
    }

    public command_request_args deepCopy() {
      return new command_request_args(this);
    }

    @Override
    public void clear() {
      this.seq = null;
      setBlockIdIsSet(false);
      this.block_id = 0;
      setCmdIdIsSet(false);
      this.cmd_id = 0;
      this.arguments = null;
    }

    public sequence_id getSeq() {
      return this.seq;
    }

    public command_request_args setSeq(sequence_id seq) {
      this.seq = seq;
      return this;
    }

    public void unsetSeq() {
      this.seq = null;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return this.seq != null;
    }

    public void setSeqIsSet(boolean value) {
      if (!value) {
        this.seq = null;
      }
    }

    public int getBlockId() {
      return this.block_id;
    }

    public command_request_args setBlockId(int block_id) {
      this.block_id = block_id;
      setBlockIdIsSet(true);
      return this;
    }

    public void unsetBlockId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BLOCK_ID_ISSET_ID);
    }

    /** Returns true if field block_id is set (has been assigned a value) and false otherwise */
    public boolean isSetBlockId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BLOCK_ID_ISSET_ID);
    }

    public void setBlockIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BLOCK_ID_ISSET_ID, value);
    }

    public int getCmdId() {
      return this.cmd_id;
    }

    public command_request_args setCmdId(int cmd_id) {
      this.cmd_id = cmd_id;
      setCmdIdIsSet(true);
      return this;
    }

    public void unsetCmdId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CMD_ID_ISSET_ID);
    }

    /** Returns true if field cmd_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCmdId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CMD_ID_ISSET_ID);
    }

    public void setCmdIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CMD_ID_ISSET_ID, value);
    }

    public int getArgumentsSize() {
      return (this.arguments == null) ? 0 : this.arguments.size();
    }

    public java.util.Iterator<java.nio.ByteBuffer> getArgumentsIterator() {
      return (this.arguments == null) ? null : this.arguments.iterator();
    }

    public void addToArguments(java.nio.ByteBuffer elem) {
      if (this.arguments == null) {
        this.arguments = new java.util.ArrayList<java.nio.ByteBuffer>();
      }
      this.arguments.add(elem);
    }

    public java.util.List<java.nio.ByteBuffer> getArguments() {
      return this.arguments;
    }

    public command_request_args setArguments(java.util.List<java.nio.ByteBuffer> arguments) {
      this.arguments = arguments;
      return this;
    }

    public void unsetArguments() {
      this.arguments = null;
    }

    /** Returns true if field arguments is set (has been assigned a value) and false otherwise */
    public boolean isSetArguments() {
      return this.arguments != null;
    }

    public void setArgumentsIsSet(boolean value) {
      if (!value) {
        this.arguments = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SEQ:
        if (value == null) {
          unsetSeq();
        } else {
          setSeq((sequence_id)value);
        }
        break;

      case BLOCK_ID:
        if (value == null) {
          unsetBlockId();
        } else {
          setBlockId((java.lang.Integer)value);
        }
        break;

      case CMD_ID:
        if (value == null) {
          unsetCmdId();
        } else {
          setCmdId((java.lang.Integer)value);
        }
        break;

      case ARGUMENTS:
        if (value == null) {
          unsetArguments();
        } else {
          setArguments((java.util.List<java.nio.ByteBuffer>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SEQ:
        return getSeq();

      case BLOCK_ID:
        return getBlockId();

      case CMD_ID:
        return getCmdId();

      case ARGUMENTS:
        return getArguments();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SEQ:
        return isSetSeq();
      case BLOCK_ID:
        return isSetBlockId();
      case CMD_ID:
        return isSetCmdId();
      case ARGUMENTS:
        return isSetArguments();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof command_request_args)
        return this.equals((command_request_args)that);
      return false;
    }

    public boolean equals(command_request_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_seq = true && this.isSetSeq();
      boolean that_present_seq = true && that.isSetSeq();
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (!this.seq.equals(that.seq))
          return false;
      }

      boolean this_present_block_id = true;
      boolean that_present_block_id = true;
      if (this_present_block_id || that_present_block_id) {
        if (!(this_present_block_id && that_present_block_id))
          return false;
        if (this.block_id != that.block_id)
          return false;
      }

      boolean this_present_cmd_id = true;
      boolean that_present_cmd_id = true;
      if (this_present_cmd_id || that_present_cmd_id) {
        if (!(this_present_cmd_id && that_present_cmd_id))
          return false;
        if (this.cmd_id != that.cmd_id)
          return false;
      }

      boolean this_present_arguments = true && this.isSetArguments();
      boolean that_present_arguments = true && that.isSetArguments();
      if (this_present_arguments || that_present_arguments) {
        if (!(this_present_arguments && that_present_arguments))
          return false;
        if (!this.arguments.equals(that.arguments))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSeq()) ? 131071 : 524287);
      if (isSetSeq())
        hashCode = hashCode * 8191 + seq.hashCode();

      hashCode = hashCode * 8191 + block_id;

      hashCode = hashCode * 8191 + cmd_id;

      hashCode = hashCode * 8191 + ((isSetArguments()) ? 131071 : 524287);
      if (isSetArguments())
        hashCode = hashCode * 8191 + arguments.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(command_request_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSeq()).compareTo(other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBlockId()).compareTo(other.isSetBlockId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlockId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.block_id, other.block_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCmdId()).compareTo(other.isSetCmdId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCmdId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmd_id, other.cmd_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetArguments()).compareTo(other.isSetArguments());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArguments()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arguments, other.arguments);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("command_request_args(");
      boolean first = true;

      sb.append("seq:");
      if (this.seq == null) {
        sb.append("null");
      } else {
        sb.append(this.seq);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("block_id:");
      sb.append(this.block_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cmd_id:");
      sb.append(this.cmd_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("arguments:");
      if (this.arguments == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.arguments, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (seq != null) {
        seq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class command_request_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public command_request_argsStandardScheme getScheme() {
        return new command_request_argsStandardScheme();
      }
    }

    private static class command_request_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<command_request_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, command_request_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.seq = new sequence_id();
                struct.seq.read(iprot);
                struct.setSeqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BLOCK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.block_id = iprot.readI32();
                struct.setBlockIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CMD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cmd_id = iprot.readI32();
                struct.setCmdIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ARGUMENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.arguments = new java.util.ArrayList<java.nio.ByteBuffer>(_list0.size);
                  java.nio.ByteBuffer _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readBinary();
                    struct.arguments.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setArgumentsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, command_request_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.seq != null) {
          oprot.writeFieldBegin(SEQ_FIELD_DESC);
          struct.seq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BLOCK_ID_FIELD_DESC);
        oprot.writeI32(struct.block_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CMD_ID_FIELD_DESC);
        oprot.writeI32(struct.cmd_id);
        oprot.writeFieldEnd();
        if (struct.arguments != null) {
          oprot.writeFieldBegin(ARGUMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.arguments.size()));
            for (java.nio.ByteBuffer _iter3 : struct.arguments)
            {
              oprot.writeBinary(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class command_request_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public command_request_argsTupleScheme getScheme() {
        return new command_request_argsTupleScheme();
      }
    }

    private static class command_request_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<command_request_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, command_request_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSeq()) {
          optionals.set(0);
        }
        if (struct.isSetBlockId()) {
          optionals.set(1);
        }
        if (struct.isSetCmdId()) {
          optionals.set(2);
        }
        if (struct.isSetArguments()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSeq()) {
          struct.seq.write(oprot);
        }
        if (struct.isSetBlockId()) {
          oprot.writeI32(struct.block_id);
        }
        if (struct.isSetCmdId()) {
          oprot.writeI32(struct.cmd_id);
        }
        if (struct.isSetArguments()) {
          {
            oprot.writeI32(struct.arguments.size());
            for (java.nio.ByteBuffer _iter4 : struct.arguments)
            {
              oprot.writeBinary(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, command_request_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.seq = new sequence_id();
          struct.seq.read(iprot);
          struct.setSeqIsSet(true);
        }
        if (incoming.get(1)) {
          struct.block_id = iprot.readI32();
          struct.setBlockIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.cmd_id = iprot.readI32();
          struct.setCmdIdIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.arguments = new java.util.ArrayList<java.nio.ByteBuffer>(_list5.size);
            java.nio.ByteBuffer _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readBinary();
              struct.arguments.add(_elem6);
            }
          }
          struct.setArgumentsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package jiffy.notification;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)")
public class notification_service {

  public interface Iface {

    public void subscribe(int block_id, java.util.List<java.lang.String> ops) throws org.apache.thrift.TException;

    public void unsubscribe(int block_id, java.util.List<java.lang.String> ops) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void subscribe(int block_id, java.util.List<java.lang.String> ops, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void unsubscribe(int block_id, java.util.List<java.lang.String> ops, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void subscribe(int block_id, java.util.List<java.lang.String> ops) throws org.apache.thrift.TException
    {
      sendSubscribe(block_id, ops);
    }

    public void sendSubscribe(int block_id, java.util.List<java.lang.String> ops) throws org.apache.thrift.TException
    {
      subscribe_args args = new subscribe_args();
      args.setBlockId(block_id);
      args.setOps(ops);
      sendBaseOneway("subscribe", args);
    }

    public void unsubscribe(int block_id, java.util.List<java.lang.String> ops) throws org.apache.thrift.TException
    {
      sendUnsubscribe(block_id, ops);
    }

    public void sendUnsubscribe(int block_id, java.util.List<java.lang.String> ops) throws org.apache.thrift.TException
    {
      unsubscribe_args args = new unsubscribe_args();
      args.setBlockId(block_id);
      args.setOps(ops);
      sendBaseOneway("unsubscribe", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void subscribe(int block_id, java.util.List<java.lang.String> ops, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      subscribe_call method_call = new subscribe_call(block_id, ops, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class subscribe_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int block_id;
      private java.util.List<java.lang.String> ops;
      public subscribe_call(int block_id, java.util.List<java.lang.String> ops, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.block_id = block_id;
        this.ops = ops;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("subscribe", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        subscribe_args args = new subscribe_args();
        args.setBlockId(block_id);
        args.setOps(ops);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void unsubscribe(int block_id, java.util.List<java.lang.String> ops, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unsubscribe_call method_call = new unsubscribe_call(block_id, ops, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unsubscribe_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int block_id;
      private java.util.List<java.lang.String> ops;
      public unsubscribe_call(int block_id, java.util.List<java.lang.String> ops, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.block_id = block_id;
        this.ops = ops;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unsubscribe", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        unsubscribe_args args = new unsubscribe_args();
        args.setBlockId(block_id);
        args.setOps(ops);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("subscribe", new subscribe());
      processMap.put("unsubscribe", new unsubscribe());
      return processMap;
    }

    public static class subscribe<I extends Iface> extends org.apache.thrift.ProcessFunction<I, subscribe_args> {
      public subscribe() {
        super("subscribe");
      }

      public subscribe_args getEmptyArgsInstance() {
        return new subscribe_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, subscribe_args args) throws org.apache.thrift.TException {
        iface.subscribe(args.block_id, args.ops);
        return null;
      }
    }

    public static class unsubscribe<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unsubscribe_args> {
      public unsubscribe() {
        super("unsubscribe");
      }

      public unsubscribe_args getEmptyArgsInstance() {
        return new unsubscribe_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, unsubscribe_args args) throws org.apache.thrift.TException {
        iface.unsubscribe(args.block_id, args.ops);
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("subscribe", new subscribe());
      processMap.put("unsubscribe", new unsubscribe());
      return processMap;
    }

    public static class subscribe<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, subscribe_args, Void> {
      public subscribe() {
        super("subscribe");
      }

      public subscribe_args getEmptyArgsInstance() {
        return new subscribe_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, subscribe_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.subscribe(args.block_id, args.ops,resultHandler);
      }
    }

    public static class unsubscribe<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unsubscribe_args, Void> {
      public unsubscribe() {
        super("unsubscribe");
      }

      public unsubscribe_args getEmptyArgsInstance() {
        return new unsubscribe_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, unsubscribe_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.unsubscribe(args.block_id, args.ops,resultHandler);
      }
    }

  }

  public static class subscribe_args implements org.apache.thrift.TBase<subscribe_args, subscribe_args._Fields>, java.io.Serializable, Cloneable, Comparable<subscribe_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("subscribe_args");

    private static final org.apache.thrift.protocol.TField BLOCK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("block_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField OPS_FIELD_DESC = new org.apache.thrift.protocol.TField("ops", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new subscribe_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new subscribe_argsTupleSchemeFactory();

    public int block_id; // required
    public java.util.List<java.lang.String> ops; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BLOCK_ID((short)1, "block_id"),
      OPS((short)2, "ops");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BLOCK_ID
            return BLOCK_ID;
          case 2: // OPS
            return OPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BLOCK_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BLOCK_ID, new org.apache.thrift.meta_data.FieldMetaData("block_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OPS, new org.apache.thrift.meta_data.FieldMetaData("ops", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(subscribe_args.class, metaDataMap);
    }

    public subscribe_args() {
    }

    public subscribe_args(
      int block_id,
      java.util.List<java.lang.String> ops)
    {
      this();
      this.block_id = block_id;
      setBlockIdIsSet(true);
      this.ops = ops;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public subscribe_args(subscribe_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.block_id = other.block_id;
      if (other.isSetOps()) {
        java.util.List<java.lang.String> __this__ops = new java.util.ArrayList<java.lang.String>(other.ops);
        this.ops = __this__ops;
      }
    }

    public subscribe_args deepCopy() {
      return new subscribe_args(this);
    }

    @Override
    public void clear() {
      setBlockIdIsSet(false);
      this.block_id = 0;
      this.ops = null;
    }

    public int getBlockId() {
      return this.block_id;
    }

    public subscribe_args setBlockId(int block_id) {
      this.block_id = block_id;
      setBlockIdIsSet(true);
      return this;
    }

    public void unsetBlockId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BLOCK_ID_ISSET_ID);
    }

    /** Returns true if field block_id is set (has been assigned a value) and false otherwise */
    public boolean isSetBlockId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BLOCK_ID_ISSET_ID);
    }

    public void setBlockIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BLOCK_ID_ISSET_ID, value);
    }

    public int getOpsSize() {
      return (this.ops == null) ? 0 : this.ops.size();
    }

    public java.util.Iterator<java.lang.String> getOpsIterator() {
      return (this.ops == null) ? null : this.ops.iterator();
    }

    public void addToOps(java.lang.String elem) {
      if (this.ops == null) {
        this.ops = new java.util.ArrayList<java.lang.String>();
      }
      this.ops.add(elem);
    }

    public java.util.List<java.lang.String> getOps() {
      return this.ops;
    }

    public subscribe_args setOps(java.util.List<java.lang.String> ops) {
      this.ops = ops;
      return this;
    }

    public void unsetOps() {
      this.ops = null;
    }

    /** Returns true if field ops is set (has been assigned a value) and false otherwise */
    public boolean isSetOps() {
      return this.ops != null;
    }

    public void setOpsIsSet(boolean value) {
      if (!value) {
        this.ops = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BLOCK_ID:
        if (value == null) {
          unsetBlockId();
        } else {
          setBlockId((java.lang.Integer)value);
        }
        break;

      case OPS:
        if (value == null) {
          unsetOps();
        } else {
          setOps((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BLOCK_ID:
        return getBlockId();

      case OPS:
        return getOps();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BLOCK_ID:
        return isSetBlockId();
      case OPS:
        return isSetOps();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof subscribe_args)
        return this.equals((subscribe_args)that);
      return false;
    }

    public boolean equals(subscribe_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_block_id = true;
      boolean that_present_block_id = true;
      if (this_present_block_id || that_present_block_id) {
        if (!(this_present_block_id && that_present_block_id))
          return false;
        if (this.block_id != that.block_id)
          return false;
      }

      boolean this_present_ops = true && this.isSetOps();
      boolean that_present_ops = true && that.isSetOps();
      if (this_present_ops || that_present_ops) {
        if (!(this_present_ops && that_present_ops))
          return false;
        if (!this.ops.equals(that.ops))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + block_id;

      hashCode = hashCode * 8191 + ((isSetOps()) ? 131071 : 524287);
      if (isSetOps())
        hashCode = hashCode * 8191 + ops.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(subscribe_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBlockId()).compareTo(other.isSetBlockId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlockId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.block_id, other.block_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOps()).compareTo(other.isSetOps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ops, other.ops);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("subscribe_args(");
      boolean first = true;

      sb.append("block_id:");
      sb.append(this.block_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ops:");
      if (this.ops == null) {
        sb.append("null");
      } else {
        sb.append(this.ops);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class subscribe_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public subscribe_argsStandardScheme getScheme() {
        return new subscribe_argsStandardScheme();
      }
    }

    private static class subscribe_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<subscribe_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, subscribe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BLOCK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.block_id = iprot.readI32();
                struct.setBlockIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.ops = new java.util.ArrayList<java.lang.String>(_list0.size);
                  java.lang.String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.ops.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setOpsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, subscribe_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BLOCK_ID_FIELD_DESC);
        oprot.writeI32(struct.block_id);
        oprot.writeFieldEnd();
        if (struct.ops != null) {
          oprot.writeFieldBegin(OPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.ops.size()));
            for (java.lang.String _iter3 : struct.ops)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class subscribe_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public subscribe_argsTupleScheme getScheme() {
        return new subscribe_argsTupleScheme();
      }
    }

    private static class subscribe_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<subscribe_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, subscribe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBlockId()) {
          optionals.set(0);
        }
        if (struct.isSetOps()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBlockId()) {
          oprot.writeI32(struct.block_id);
        }
        if (struct.isSetOps()) {
          {
            oprot.writeI32(struct.ops.size());
            for (java.lang.String _iter4 : struct.ops)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, subscribe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.block_id = iprot.readI32();
          struct.setBlockIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.ops = new java.util.ArrayList<java.lang.String>(_list5.size);
            java.lang.String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.ops.add(_elem6);
            }
          }
          struct.setOpsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class unsubscribe_args implements org.apache.thrift.TBase<unsubscribe_args, unsubscribe_args._Fields>, java.io.Serializable, Cloneable, Comparable<unsubscribe_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unsubscribe_args");

    private static final org.apache.thrift.protocol.TField BLOCK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("block_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField OPS_FIELD_DESC = new org.apache.thrift.protocol.TField("ops", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new unsubscribe_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new unsubscribe_argsTupleSchemeFactory();

    public int block_id; // required
    public java.util.List<java.lang.String> ops; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BLOCK_ID((short)1, "block_id"),
      OPS((short)2, "ops");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BLOCK_ID
            return BLOCK_ID;
          case 2: // OPS
            return OPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BLOCK_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BLOCK_ID, new org.apache.thrift.meta_data.FieldMetaData("block_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OPS, new org.apache.thrift.meta_data.FieldMetaData("ops", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unsubscribe_args.class, metaDataMap);
    }

    public unsubscribe_args() {
    }

    public unsubscribe_args(
      int block_id,
      java.util.List<java.lang.String> ops)
    {
      this();
      this.block_id = block_id;
      setBlockIdIsSet(true);
      this.ops = ops;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unsubscribe_args(unsubscribe_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.block_id = other.block_id;
      if (other.isSetOps()) {
        java.util.List<java.lang.String> __this__ops = new java.util.ArrayList<java.lang.String>(other.ops);
        this.ops = __this__ops;
      }
    }

    public unsubscribe_args deepCopy() {
      return new unsubscribe_args(this);
    }

    @Override
    public void clear() {
      setBlockIdIsSet(false);
      this.block_id = 0;
      this.ops = null;
    }

    public int getBlockId() {
      return this.block_id;
    }

    public unsubscribe_args setBlockId(int block_id) {
      this.block_id = block_id;
      setBlockIdIsSet(true);
      return this;
    }

    public void unsetBlockId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BLOCK_ID_ISSET_ID);
    }

    /** Returns true if field block_id is set (has been assigned a value) and false otherwise */
    public boolean isSetBlockId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BLOCK_ID_ISSET_ID);
    }

    public void setBlockIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BLOCK_ID_ISSET_ID, value);
    }

    public int getOpsSize() {
      return (this.ops == null) ? 0 : this.ops.size();
    }

    public java.util.Iterator<java.lang.String> getOpsIterator() {
      return (this.ops == null) ? null : this.ops.iterator();
    }

    public void addToOps(java.lang.String elem) {
      if (this.ops == null) {
        this.ops = new java.util.ArrayList<java.lang.String>();
      }
      this.ops.add(elem);
    }

    public java.util.List<java.lang.String> getOps() {
      return this.ops;
    }

    public unsubscribe_args setOps(java.util.List<java.lang.String> ops) {
      this.ops = ops;
      return this;
    }

    public void unsetOps() {
      this.ops = null;
    }

    /** Returns true if field ops is set (has been assigned a value) and false otherwise */
    public boolean isSetOps() {
      return this.ops != null;
    }

    public void setOpsIsSet(boolean value) {
      if (!value) {
        this.ops = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BLOCK_ID:
        if (value == null) {
          unsetBlockId();
        } else {
          setBlockId((java.lang.Integer)value);
        }
        break;

      case OPS:
        if (value == null) {
          unsetOps();
        } else {
          setOps((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BLOCK_ID:
        return getBlockId();

      case OPS:
        return getOps();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BLOCK_ID:
        return isSetBlockId();
      case OPS:
        return isSetOps();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof unsubscribe_args)
        return this.equals((unsubscribe_args)that);
      return false;
    }

    public boolean equals(unsubscribe_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_block_id = true;
      boolean that_present_block_id = true;
      if (this_present_block_id || that_present_block_id) {
        if (!(this_present_block_id && that_present_block_id))
          return false;
        if (this.block_id != that.block_id)
          return false;
      }

      boolean this_present_ops = true && this.isSetOps();
      boolean that_present_ops = true && that.isSetOps();
      if (this_present_ops || that_present_ops) {
        if (!(this_present_ops && that_present_ops))
          return false;
        if (!this.ops.equals(that.ops))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + block_id;

      hashCode = hashCode * 8191 + ((isSetOps()) ? 131071 : 524287);
      if (isSetOps())
        hashCode = hashCode * 8191 + ops.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(unsubscribe_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBlockId()).compareTo(other.isSetBlockId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlockId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.block_id, other.block_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOps()).compareTo(other.isSetOps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ops, other.ops);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("unsubscribe_args(");
      boolean first = true;

      sb.append("block_id:");
      sb.append(this.block_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ops:");
      if (this.ops == null) {
        sb.append("null");
      } else {
        sb.append(this.ops);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unsubscribe_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public unsubscribe_argsStandardScheme getScheme() {
        return new unsubscribe_argsStandardScheme();
      }
    }

    private static class unsubscribe_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<unsubscribe_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unsubscribe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BLOCK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.block_id = iprot.readI32();
                struct.setBlockIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.ops = new java.util.ArrayList<java.lang.String>(_list8.size);
                  java.lang.String _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readString();
                    struct.ops.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setOpsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unsubscribe_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BLOCK_ID_FIELD_DESC);
        oprot.writeI32(struct.block_id);
        oprot.writeFieldEnd();
        if (struct.ops != null) {
          oprot.writeFieldBegin(OPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.ops.size()));
            for (java.lang.String _iter11 : struct.ops)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unsubscribe_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public unsubscribe_argsTupleScheme getScheme() {
        return new unsubscribe_argsTupleScheme();
      }
    }

    private static class unsubscribe_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<unsubscribe_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unsubscribe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBlockId()) {
          optionals.set(0);
        }
        if (struct.isSetOps()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBlockId()) {
          oprot.writeI32(struct.block_id);
        }
        if (struct.isSetOps()) {
          {
            oprot.writeI32(struct.ops.size());
            for (java.lang.String _iter12 : struct.ops)
            {
              oprot.writeString(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unsubscribe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.block_id = iprot.readI32();
          struct.setBlockIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.ops = new java.util.ArrayList<java.lang.String>(_list13.size);
            java.lang.String _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readString();
              struct.ops.add(_elem14);
            }
          }
          struct.setOpsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}

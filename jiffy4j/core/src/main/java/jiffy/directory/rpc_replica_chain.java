/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package jiffy.directory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)")
public class rpc_replica_chain implements org.apache.thrift.TBase<rpc_replica_chain, rpc_replica_chain._Fields>, java.io.Serializable, Cloneable, Comparable<rpc_replica_chain> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpc_replica_chain");

  private static final org.apache.thrift.protocol.TField BLOCK_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("block_ids", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STORAGE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("storage_mode", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rpc_replica_chainStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rpc_replica_chainTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> block_ids; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String metadata; // required
  /**
   * 
   * @see rpc_storage_mode
   */
  public @org.apache.thrift.annotation.Nullable rpc_storage_mode storage_mode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BLOCK_IDS((short)1, "block_ids"),
    NAME((short)2, "name"),
    METADATA((short)3, "metadata"),
    /**
     * 
     * @see rpc_storage_mode
     */
    STORAGE_MODE((short)4, "storage_mode");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BLOCK_IDS
          return BLOCK_IDS;
        case 2: // NAME
          return NAME;
        case 3: // METADATA
          return METADATA;
        case 4: // STORAGE_MODE
          return STORAGE_MODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BLOCK_IDS, new org.apache.thrift.meta_data.FieldMetaData("block_ids", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STORAGE_MODE, new org.apache.thrift.meta_data.FieldMetaData("storage_mode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, rpc_storage_mode.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpc_replica_chain.class, metaDataMap);
  }

  public rpc_replica_chain() {
  }

  public rpc_replica_chain(
    java.util.List<java.lang.String> block_ids,
    java.lang.String name,
    java.lang.String metadata,
    rpc_storage_mode storage_mode)
  {
    this();
    this.block_ids = block_ids;
    this.name = name;
    this.metadata = metadata;
    this.storage_mode = storage_mode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public rpc_replica_chain(rpc_replica_chain other) {
    if (other.isSetBlockIds()) {
      java.util.List<java.lang.String> __this__block_ids = new java.util.ArrayList<java.lang.String>(other.block_ids);
      this.block_ids = __this__block_ids;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetMetadata()) {
      this.metadata = other.metadata;
    }
    if (other.isSetStorageMode()) {
      this.storage_mode = other.storage_mode;
    }
  }

  public rpc_replica_chain deepCopy() {
    return new rpc_replica_chain(this);
  }

  @Override
  public void clear() {
    if (this.block_ids != null) {
      this.block_ids.clear();
    }
    this.name = null;
    this.metadata = null;
    this.storage_mode = null;
  }

  public int getBlockIdsSize() {
    return (this.block_ids == null) ? 0 : this.block_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getBlockIdsIterator() {
    return (this.block_ids == null) ? null : this.block_ids.iterator();
  }

  public void addToBlockIds(java.lang.String elem) {
    if (this.block_ids == null) {
      this.block_ids = new java.util.ArrayList<java.lang.String>();
    }
    this.block_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getBlockIds() {
    return this.block_ids;
  }

  public rpc_replica_chain setBlockIds(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> block_ids) {
    this.block_ids = block_ids;
    return this;
  }

  public void unsetBlockIds() {
    this.block_ids = null;
  }

  /** Returns true if field block_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockIds() {
    return this.block_ids != null;
  }

  public void setBlockIdsIsSet(boolean value) {
    if (!value) {
      this.block_ids = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public rpc_replica_chain setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMetadata() {
    return this.metadata;
  }

  public rpc_replica_chain setMetadata(@org.apache.thrift.annotation.Nullable java.lang.String metadata) {
    this.metadata = metadata;
    return this;
  }

  public void unsetMetadata() {
    this.metadata = null;
  }

  /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata() {
    return this.metadata != null;
  }

  public void setMetadataIsSet(boolean value) {
    if (!value) {
      this.metadata = null;
    }
  }

  /**
   * 
   * @see rpc_storage_mode
   */
  @org.apache.thrift.annotation.Nullable
  public rpc_storage_mode getStorageMode() {
    return this.storage_mode;
  }

  /**
   * 
   * @see rpc_storage_mode
   */
  public rpc_replica_chain setStorageMode(@org.apache.thrift.annotation.Nullable rpc_storage_mode storage_mode) {
    this.storage_mode = storage_mode;
    return this;
  }

  public void unsetStorageMode() {
    this.storage_mode = null;
  }

  /** Returns true if field storage_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetStorageMode() {
    return this.storage_mode != null;
  }

  public void setStorageModeIsSet(boolean value) {
    if (!value) {
      this.storage_mode = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case BLOCK_IDS:
      if (value == null) {
        unsetBlockIds();
      } else {
        setBlockIds((java.util.List<java.lang.String>)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case METADATA:
      if (value == null) {
        unsetMetadata();
      } else {
        setMetadata((java.lang.String)value);
      }
      break;

    case STORAGE_MODE:
      if (value == null) {
        unsetStorageMode();
      } else {
        setStorageMode((rpc_storage_mode)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BLOCK_IDS:
      return getBlockIds();

    case NAME:
      return getName();

    case METADATA:
      return getMetadata();

    case STORAGE_MODE:
      return getStorageMode();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BLOCK_IDS:
      return isSetBlockIds();
    case NAME:
      return isSetName();
    case METADATA:
      return isSetMetadata();
    case STORAGE_MODE:
      return isSetStorageMode();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof rpc_replica_chain)
      return this.equals((rpc_replica_chain)that);
    return false;
  }

  public boolean equals(rpc_replica_chain that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_block_ids = true && this.isSetBlockIds();
    boolean that_present_block_ids = true && that.isSetBlockIds();
    if (this_present_block_ids || that_present_block_ids) {
      if (!(this_present_block_ids && that_present_block_ids))
        return false;
      if (!this.block_ids.equals(that.block_ids))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_metadata = true && this.isSetMetadata();
    boolean that_present_metadata = true && that.isSetMetadata();
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (!this.metadata.equals(that.metadata))
        return false;
    }

    boolean this_present_storage_mode = true && this.isSetStorageMode();
    boolean that_present_storage_mode = true && that.isSetStorageMode();
    if (this_present_storage_mode || that_present_storage_mode) {
      if (!(this_present_storage_mode && that_present_storage_mode))
        return false;
      if (!this.storage_mode.equals(that.storage_mode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetBlockIds()) ? 131071 : 524287);
    if (isSetBlockIds())
      hashCode = hashCode * 8191 + block_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetMetadata()) ? 131071 : 524287);
    if (isSetMetadata())
      hashCode = hashCode * 8191 + metadata.hashCode();

    hashCode = hashCode * 8191 + ((isSetStorageMode()) ? 131071 : 524287);
    if (isSetStorageMode())
      hashCode = hashCode * 8191 + storage_mode.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(rpc_replica_chain other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetBlockIds()).compareTo(other.isSetBlockIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.block_ids, other.block_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStorageMode()).compareTo(other.isSetStorageMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorageMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storage_mode, other.storage_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("rpc_replica_chain(");
    boolean first = true;

    sb.append("block_ids:");
    if (this.block_ids == null) {
      sb.append("null");
    } else {
      sb.append(this.block_ids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadata:");
    if (this.metadata == null) {
      sb.append("null");
    } else {
      sb.append(this.metadata);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("storage_mode:");
    if (this.storage_mode == null) {
      sb.append("null");
    } else {
      sb.append(this.storage_mode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (block_ids == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'block_ids' was not present! Struct: " + toString());
    }
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (metadata == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata' was not present! Struct: " + toString());
    }
    if (storage_mode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'storage_mode' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class rpc_replica_chainStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public rpc_replica_chainStandardScheme getScheme() {
      return new rpc_replica_chainStandardScheme();
    }
  }

  private static class rpc_replica_chainStandardScheme extends org.apache.thrift.scheme.StandardScheme<rpc_replica_chain> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, rpc_replica_chain struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BLOCK_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                if (struct.block_ids == null) {
                  struct.block_ids = new java.util.ArrayList<java.lang.String>(_list0.size);
                }
                @org.apache.thrift.annotation.Nullable java.lang.String _elem1 = null;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.block_ids.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setBlockIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metadata = iprot.readString();
              struct.setMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STORAGE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.storage_mode = jiffy.directory.rpc_storage_mode.findByValue(iprot.readI32());
              struct.setStorageModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, rpc_replica_chain struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.block_ids != null) {
        oprot.writeFieldBegin(BLOCK_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.block_ids.size()));
          for (java.lang.String _iter3 : struct.block_ids)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.metadata != null) {
        oprot.writeFieldBegin(METADATA_FIELD_DESC);
        oprot.writeString(struct.metadata);
        oprot.writeFieldEnd();
      }
      if (struct.storage_mode != null) {
        oprot.writeFieldBegin(STORAGE_MODE_FIELD_DESC);
        oprot.writeI32(struct.storage_mode.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class rpc_replica_chainTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public rpc_replica_chainTupleScheme getScheme() {
      return new rpc_replica_chainTupleScheme();
    }
  }

  private static class rpc_replica_chainTupleScheme extends org.apache.thrift.scheme.TupleScheme<rpc_replica_chain> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, rpc_replica_chain struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.block_ids.size());
        for (java.lang.String _iter4 : struct.block_ids)
        {
          oprot.writeString(_iter4);
        }
      }
      oprot.writeString(struct.name);
      oprot.writeString(struct.metadata);
      oprot.writeI32(struct.storage_mode.getValue());
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, rpc_replica_chain struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        if (struct.block_ids == null) {
          struct.block_ids = new java.util.ArrayList<java.lang.String>(_list5.size);
        }
        @org.apache.thrift.annotation.Nullable java.lang.String _elem6 = null;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = iprot.readString();
          struct.block_ids.add(_elem6);
        }
      }
      struct.setBlockIdsIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.metadata = iprot.readString();
      struct.setMetadataIsSet(true);
      struct.storage_mode = jiffy.directory.rpc_storage_mode.findByValue(iprot.readI32());
      struct.setStorageModeIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

